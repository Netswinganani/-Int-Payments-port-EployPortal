sequenceDiagram
    participant Client as Client Browser
    participant FE as Frontend (React)
    participant API as Backend API (Express)
    participant Auth as AuthService
    participant DB as Database (Azure SQL)
    
    %% User Authentication Flow
    Client->>FE: Access Employee Portal
    FE->>FE: Check for existing auth token
    alt No valid token
        FE->>Client: Redirect to Login Page
        Client->>FE: Submit Login (username, password)
        FE->>API: POST /api/employee/login
        API->>API: Validate input
        API->>Auth: login(username, password)
        Auth->>DB: Query User with username
        DB-->>Auth: Return User record
        Auth->>Auth: Verify password with bcrypt
        alt Authentication Success
            Auth->>Auth: Generate JWT token
            Auth-->>API: Return token and user data
            API-->>FE: Return success with HttpOnly cookie containing JWT
            FE->>FE: Store user data in state/context
            FE->>Client: Redirect to Dashboard
        else Authentication Failed
            Auth-->>API: Return authentication error
            API-->>FE: Return error response
            FE->>Client: Show error message
        end
    else Valid token exists
        FE->>API: GET /api/employee/me (with JWT cookie)
        API->>Auth: verifyToken()
        Auth-->>API: Return decoded user
        API-->>FE: Return user data
        FE->>Client: Render Dashboard
    end
    
    %% Dashboard Data Loading
    Client->>FE: Access Dashboard
    FE->>API: GET /api/employee/me
    API->>Auth: verifyToken()
    Auth-->>API: Return decoded user
    API-->>FE: Return user profile data
    
    FE->>API: GET /api/employee/payments?page=1&limit=10
    API->>Auth: verifyToken()
    Auth-->>API: Return decoded user
    API->>DB: Query payments for user
    DB-->>API: Return paginated payments
    API-->>FE: Return payments data
    FE->>Client: Display dashboard with user info and payments
    
    %% Payment Filtering
    Client->>FE: Apply payment filters
    FE->>API: GET /api/employee/payments?status=completed&startDate=2023-01-01&endDate=2023-12-31
    API->>Auth: verifyToken()
    Auth-->>API: Return decoded user
    API->>DB: Query filtered payments
    DB-->>API: Return filtered payments
    API-->>FE: Return filtered payments
    FE->>Client: Update payments display
    
    %% Admin Creating Employee
    Client->>FE: Submit create employee form
    FE->>API: POST /api/admin/users
    API->>Auth: verifyToken() + requireAdmin()
    Auth-->>API: Return decoded admin user
    API->>API: Validate employee data
    API->>Auth: hashPassword()
    Auth-->>API: Return hashed password
    API->>DB: Insert new user record
    DB-->>API: Return created user
    API-->>FE: Return success response
    FE->>Client: Show success message
    
    %% User Logout
    Client->>FE: Click Logout
    FE->>API: POST /api/employee/logout
    API->>API: Clear auth cookie
    API-->>FE: Return logout success
    FE->>FE: Clear local state/storage
    FE->>Client: Redirect to Login Page